import mongoose from "mongoose"
const documentSchema = new mongoose.Schema({
  _id: {
    type: String,
    default: () => `doc_${Math.random().toString(36).substr(2, 9)}`, // Generates doc_xxxxxx format
    required: true
  },
  title: { 
    type: String, 
    default: 'Untitled Document' 
  },
  content: { 
    type: String, 
    default: '' 
  },
  version: { 
    type: Number, 
    default: 0 
  },
  // slug: { 
  //   type: String, 
  //   unique: true 
  // },
  collaborators: [{
    userId: String,
    name: String,
    color: String,
    cursorPosition: Number,
    lastSeen: { 
      type: Date, 
      default: Date.now 
    }
  }]
}, { 
  timestamps: true
});

// Pre-save hook to ensure slug exists and matches _id
// documentSchema.pre('save', function(next) {
//   if (!this.slug) {
//     this.slug = this._id; // Use the string _id as slug
//   }
//   next();
// });

// Static method for creating documents with automatic ID generation
// documentSchema.statics.createDocument = async function(docData) {
//   const doc = new this({
//     ...docData,
//     // _id will be auto-generated by the schema default
//   });
//   return await doc.save();
// };

// Helper method to add collaborators
// documentSchema.methods.addCollaborator = function(userId, name, color) {
//   const existing = this.collaborators.find(c => c.userId === userId);
//   if (!existing) {
//     this.collaborators.push({
//       userId,
//       name,
//       color,
//       cursorPosition: 0,
//       lastSeen: new Date()
//     });
//   }
//   return this.save();
// };

// Helper method to update collaborator cursor position
// documentSchema.methods.updateCursor = function(userId, position) {
//   const collaborator = this.collaborators.find(c => c.userId === userId);
//   if (collaborator) {
//     collaborator.cursorPosition = position;
//     collaborator.lastSeen = new Date();
//   }
//   return this.save();
// };

export default mongoose.model('Document', documentSchema);